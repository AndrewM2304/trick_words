import { words } from "popular-english-words";
import { useUserProfileStore } from "@components/store";
import { useUser, useSupabaseClient } from "@supabase/auth-helpers-react";
import { useRouter } from "next/router";
import React, { useState, useRef } from "react";
import styles from "./HomeScreen.module.css";
import { Database } from "@utilities/supabase";
import {
  default_avatar,
  default_computer,
  local_game,
} from "@utilities/constants";
import { GameType } from "@utilities/game";
import { Button } from "@components/Button";
import { Dialog } from "@components/Dialog";
import { OutlineText } from "@components/OutlineText";

type Games = Database["public"]["Tables"]["games"]["Row"];
export type HomeScreenProps = {};
const HomeScreen = ({}: HomeScreenProps) => {
  const dialogRef = useRef<HTMLDialogElement>(null);
  const user = useUser();
  const { userProfile } = useUserProfileStore();
  const [secondPlayer, setSecondPlayer] = useState("");
  const [loading, setLoading] = useState(false);
  const [gameType, setGameType] = useState<GameType | null>(null);
  const supabase = useSupabaseClient<Games>();
  const router = useRouter();
  const [showDialog, setShowDialog] = useState(false);

  const createGame = async () => {
    if (!user) throw new Error("No user");
    const newGame: Partial<Games> = {
      current_word: "a",
      current_letter_index: 0,
      player_one_id: user.id,
      player_one_name: user.user_metadata.full_name,
      player_one_avatar:
        userProfile?.avatar_url ?? user.user_metadata.avatar_url,
      game_type: gameType!,
      current_player_index: 0,
    };
    if (
      gameType === GameType.COMPUTER ||
      gameType === GameType.LOCAL_MULTIPLAYER
    ) {
      const savedItems = window.localStorage.getItem(local_game);
      newGame.player_two_id = crypto.randomUUID();
      newGame.player_two_name =
        gameType === GameType.COMPUTER ? "Computer" : secondPlayer;
      newGame.player_two_avatar =
        gameType === GameType.COMPUTER ? default_computer : default_avatar;
      newGame.player_one_score = 0;
      newGame.player_two_score = 0;
      const arrayOfGames: Games[] = [];
      if (savedItems) {
        arrayOfGames.push(...JSON.parse(savedItems));
      }
      newGame.id = arrayOfGames.length + 1;
      window.localStorage.setItem(
        local_game,
        JSON.stringify([...arrayOfGames, newGame])
      );
      router.push(`/game/${newGame.id}?gametype=local`);
    }

    if (gameType === GameType.ONLINE_MULTIPLAYER) {
      try {
        const { data, error } = await supabase
          .from("games")
          .insert(newGame)
          .select();
        if (data) {
          router.push(`/game/${data[0].id}`);
        }
        if (error) throw new Error(error.message);
      } catch (error) {
        console.log("Error loading user data!");
        console.log(error);
      } finally {
        setLoading(false);
      }
    }
  };

  const displayButton = () => {
    if (
      gameType === GameType.COMPUTER ||
      gameType === GameType.ONLINE_MULTIPLAYER
    )
      return true;
    if (gameType === GameType.LOCAL_MULTIPLAYER && secondPlayer !== "")
      return true;
    else return false;
  };

  const closeModal = () => {
    setShowDialog(false);
    setSecondPlayer("");
    setGameType(null);
  };

  React.useEffect(() => {
    const allWords = words.getAll().length;
    const greaterThanThreeLetters = words.getMostPopularFilter(
      allWords,
      (word: string) => {
        return word.length > 2;
      }
    );

    const ar = words.getWordRank("time");

    console.log(greaterThanThreeLetters);
  }, []);

  return (
    <div data-testid="HomeScreen-wrapper" className={styles.homeScreenWrapper}>
      <div className={styles.central}>
        <OutlineText
          text={"Word Duel"}
          sizeInRem={2}
          upperCase={true}
          alignment={"center"}
        />
        <Button
          text="New Game"
          action={() => setShowDialog(true)}
          type="primary"
        />
        <Button
          text="how to play"
          action={() => setShowDialog(true)}
          type="secondary"
        />
      </div>

      <Dialog
        display={showDialog}
        setDisplay={() => closeModal()}
        animate={true}
      >
        <button
          aria-label="close"
          className={styles.close}
          onClick={() => closeModal()}
        >
          <svg
            width="38"
            height="38"
            viewBox="0 0 38 38"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M15 15L23 23M23 15L15 23M35 19C35 21.1012 34.5861 23.1817 33.7821 25.1229C32.978 27.0641 31.7994 28.828 30.3137 30.3137C28.828 31.7994 27.0641 32.978 25.1229 33.7821C23.1817 34.5861 21.1012 35 19 35C16.8989 35 14.8183 34.5861 12.8771 33.7821C10.9359 32.978 9.17203 31.7994 7.68629 30.3137C6.20055 28.828 5.022 27.0641 4.21793 25.1229C3.41385 23.1817 3 21.1012 3 19C3 14.7565 4.68571 10.6869 7.68629 7.68629C10.6869 4.68571 14.7565 3 19 3C23.2435 3 27.3131 4.68571 30.3137 7.68629C33.3143 10.6869 35 14.7565 35 19Z"
              stroke="black"
              strokeWidth="5"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
            <path
              d="M15 15L23 23M23 15L15 23M35 19C35 21.1012 34.5861 23.1817 33.7821 25.1229C32.978 27.0641 31.7994 28.828 30.3137 30.3137C28.828 31.7994 27.0641 32.978 25.1229 33.7821C23.1817 34.5861 21.1012 35 19 35C16.8989 35 14.8183 34.5861 12.8771 33.7821C10.9359 32.978 9.17203 31.7994 7.68629 30.3137C6.20055 28.828 5.022 27.0641 4.21793 25.1229C3.41385 23.1817 3 21.1012 3 19C3 14.7565 4.68571 10.6869 7.68629 7.68629C10.6869 4.68571 14.7565 3 19 3C23.2435 3 27.3131 4.68571 30.3137 7.68629C33.3143 10.6869 35 14.7565 35 19Z"
              stroke="white"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </svg>
        </button>
        <fieldset className={styles.fieldset}>
          <legend>
            <OutlineText
              text={"Select Game Type"}
              sizeInRem={1.1}
              upperCase={false}
              alignment={"left"}
              focus={false}
            />
          </legend>
          <label className={styles.radio}>
            <svg
              width="23"
              height="23"
              viewBox="0 0 23 23"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M8 16.25V17.257C8.00005 17.6511 7.92244 18.0414 7.77162 18.4055C7.6208 18.7696 7.39971 19.1004 7.121 19.379L6.5 20H15.5L14.879 19.379C14.6003 19.1004 14.3792 18.7696 14.2284 18.4055C14.0776 18.0414 14 17.6511 14 17.257V16.25M20 4.25V14C20 14.5967 19.7629 15.169 19.341 15.591C18.919 16.0129 18.3467 16.25 17.75 16.25H4.25C3.65326 16.25 3.08097 16.0129 2.65901 15.591C2.23705 15.169 2 14.5967 2 14V4.25M20 4.25C20 3.65326 19.7629 3.08097 19.341 2.65901C18.919 2.23705 18.3467 2 17.75 2H4.25C3.65326 2 3.08097 2.23705 2.65901 2.65901C2.23705 3.08097 2 3.65326 2 4.25M20 4.25V11C20 11.5967 19.7629 12.169 19.341 12.591C18.919 13.0129 18.3467 13.25 17.75 13.25H4.25C3.65326 13.25 3.08097 13.0129 2.65901 12.591C2.23705 12.169 2 11.5967 2 11V4.25"
                stroke="black"
                strokeWidth="4"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
              <path
                d="M9 17.25V18.257C9.00005 18.6511 8.92244 19.0414 8.77162 19.4055C8.6208 19.7696 8.39971 20.1004 8.121 20.379L7.5 21H16.5L15.879 20.379C15.6003 20.1004 15.3792 19.7696 15.2284 19.4055C15.0776 19.0414 15 18.6511 15 18.257V17.25M21 5.25V15C21 15.5967 20.7629 16.169 20.341 16.591C19.919 17.0129 19.3467 17.25 18.75 17.25H5.25C4.65326 17.25 4.08097 17.0129 3.65901 16.591C3.23705 16.169 3 15.5967 3 15V5.25M21 5.25C21 4.65326 20.7629 4.08097 20.341 3.65901C19.919 3.23705 19.3467 3 18.75 3H5.25C4.65326 3 4.08097 3.23705 3.65901 3.65901C3.23705 4.08097 3 4.65326 3 5.25M21 5.25V12C21 12.5967 20.7629 13.169 20.341 13.591C19.919 14.0129 19.3467 14.25 18.75 14.25H5.25C4.65326 14.25 4.08097 14.0129 3.65901 13.591C3.23705 13.169 3 12.5967 3 12V5.25"
                stroke="black"
                strokeWidth="4"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
              <path
                d="M8 16.25V17.257C8.00005 17.6511 7.92244 18.0414 7.77162 18.4055C7.6208 18.7696 7.39971 19.1004 7.121 19.379L6.5 20H15.5L14.879 19.379C14.6003 19.1004 14.3792 18.7696 14.2284 18.4055C14.0776 18.0414 14 17.6511 14 17.257V16.25M20 4.25V14C20 14.5967 19.7629 15.169 19.341 15.591C18.919 16.0129 18.3467 16.25 17.75 16.25H4.25C3.65326 16.25 3.08097 16.0129 2.65901 15.591C2.23705 15.169 2 14.5967 2 14V4.25M20 4.25C20 3.65326 19.7629 3.08097 19.341 2.65901C18.919 2.23705 18.3467 2 17.75 2H4.25C3.65326 2 3.08097 2.23705 2.65901 2.65901C2.23705 3.08097 2 3.65326 2 4.25M20 4.25V11C20 11.5967 19.7629 12.169 19.341 12.591C18.919 13.0129 18.3467 13.25 17.75 13.25H4.25C3.65326 13.25 3.08097 13.0129 2.65901 12.591C2.23705 12.169 2 11.5967 2 11V4.25"
                stroke="white"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
            <div className={styles.title}>Computer</div>

            <div className={styles.smallText}>Play against the computer</div>

            <input
              type="radio"
              name="game-type"
              value="computer"
              checked={gameType === GameType.COMPUTER}
              onChange={(e) => setGameType(GameType.COMPUTER)}
            />
          </label>
          <label className={styles.radio}>
            <svg
              width="23"
              height="25"
              viewBox="0 0 23 25"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M6.5 22L2 17.5M2 17.5L6.5 13M2 17.5H15.5M15.5 2L20 6.5M20 6.5L15.5 11M20 6.5H13.25H6.5"
                stroke="black"
                strokeWidth="4"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
              <path
                d="M7.5 23L3 18.5M3 18.5L7.5 14M3 18.5H16.5M16.5 3L21 7.5M21 7.5L16.5 12M21 7.5H14.25H7.5"
                stroke="black"
                strokeWidth="4"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
              <path
                d="M6.5 22L2 17.5M2 17.5L6.5 13M2 17.5H15.5M15.5 2L20 6.5M20 6.5L15.5 11M20 6.5H13.25H6.5"
                stroke="white"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
            <div className={styles.title}>Pass and Play</div>
            <div className={styles.smallText}>
              Play local game on your device with friends
            </div>

            <input
              type="radio"
              name="game-type"
              value="local_multiplayer"
              checked={gameType === GameType.LOCAL_MULTIPLAYER}
              onChange={(e) => setGameType(GameType.LOCAL_MULTIPLAYER)}
            />
          </label>
          <label className={styles.radio}>
            <svg
              width="23"
              height="17"
              viewBox="0 0 23 17"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M21.6824 5.59258L21.6825 5.59271C21.9113 5.82834 22.0381 6.14454 22.0356 6.47295C22.0331 6.80105 21.9017 7.115 21.6698 7.34706L21.6824 5.59258ZM21.6824 5.59258C19.2312 3.0698 15.7977 1.50017 12.0004 1.50001M21.6824 5.59258L12.0004 1.50001M5.13934 8.42855L5.13931 8.42853C6.0253 7.50158 7.0902 6.76409 8.26952 6.26071C9.44868 5.75741 10.7177 5.49862 11.9998 5.50001C13.2818 5.49862 14.5509 5.75741 15.73 6.26071C16.9092 6.76405 17.9741 7.50147 18.86 8.42832C19.086 8.66426 19.2106 8.97931 19.2072 9.30599C19.2037 9.63279 19.0725 9.94524 18.8415 10.1764L18.8413 10.1766L18.4873 10.5306L18.4872 10.5307C18.3695 10.6483 18.2294 10.7413 18.0753 10.8041C17.9212 10.8669 17.7561 10.8983 17.5896 10.8964C17.4232 10.8945 17.2589 10.8595 17.1062 10.7932C16.9535 10.727 16.8156 10.6309 16.7005 10.5107L16.6997 10.5099C16.0937 9.87368 15.3646 9.36742 14.5567 9.0219C13.7488 8.67637 12.8791 8.49881 12.0004 8.50001L11.9998 8.50001C10.1518 8.50001 8.48486 9.2701 7.30035 10.5103L7.30034 10.5104C7.18525 10.6309 7.04723 10.7271 6.8944 10.7935C6.74156 10.8599 6.577 10.895 6.41038 10.8969C6.24376 10.8988 6.07846 10.8673 5.92418 10.8044C5.7699 10.7414 5.62976 10.6482 5.51201 10.5304M5.13934 8.42855C4.91381 8.66415 4.78927 8.97861 4.79238 9.30481C4.7955 9.63201 4.92679 9.94494 5.15806 10.1764L5.15821 10.1766L5.51201 10.5304M5.13934 8.42855C5.14002 8.42784 5.14071 8.42712 5.14139 8.42641L5.4491 8.72236L5.86576 10.177M5.13934 8.42855L5.49691 8.7781C5.36389 8.91903 5.29051 9.10608 5.29236 9.30005C5.29423 9.49637 5.373 9.68413 5.51177 9.82301L5.86576 10.177M5.51201 10.5304L5.86576 10.177M5.51201 10.5304L5.51221 10.5306L5.86576 10.177M16.0475 11.2752L16.0476 11.2753C16.2663 11.5128 16.3846 11.8257 16.3778 12.1485C16.3709 12.4711 16.2396 12.7786 16.0113 13.0066L16.0475 11.2752ZM16.0475 11.2752C15.044 10.186 13.6017 9.50015 12.0002 9.50001M16.0475 11.2752L16.0109 13.007L15.6573 13.3606L15.6572 13.3607C15.5375 13.4802 15.3949 13.5742 15.2379 13.637C15.0809 13.6998 14.9128 13.7301 14.7437 13.7261C14.5747 13.722 14.4082 13.6837 14.2544 13.6135C14.1006 13.5432 13.9626 13.4425 13.8488 13.3174L13.8484 13.317C13.6146 13.0592 13.3294 12.8533 13.0111 12.7126C12.6928 12.5719 12.3485 12.4995 12.0005 12.5L11.9998 12.5C11.2661 12.5 10.6085 12.8135 10.1495 13.3177L10.1494 13.3177C10.0356 13.4426 9.89777 13.5431 9.7441 13.6132C9.59044 13.6833 9.42416 13.7215 9.25531 13.7256C9.08646 13.7296 8.91854 13.6994 8.76169 13.6368C8.60484 13.5741 8.46232 13.4803 8.34272 13.3611L8.34221 13.3606L7.98828 13.0066C7.98826 13.0066 7.98823 13.0066 7.98821 13.0066C7.75992 12.7783 7.62877 12.4706 7.62225 12.1478C7.61573 11.8252 7.73422 11.5126 7.95291 11.2754C8.46759 10.7152 9.0931 10.2681 9.78975 9.96245C10.4866 9.65675 11.2393 9.49927 12.0002 9.50001M12.0002 9.50001L11.9998 10M12.0002 9.50001C12.0001 9.50001 11.9999 9.50001 11.9998 9.50001V10M11.9998 10C11.3082 9.99934 10.624 10.1425 9.99062 10.4203C9.35728 10.6982 8.78863 11.1047 8.32077 11.614L11.9998 10ZM12.0004 1.50001C10.1942 1.49787 8.40616 1.85914 6.74255 2.5623C5.079 3.26544 3.57392 4.29607 2.31689 5.59286L12.0004 1.50001ZM2.31675 5.59301C2.08815 5.82861 1.96141 6.14468 1.9639 6.47295C1.9664 6.80122 2.09793 7.11533 2.33008 7.34743C2.33018 7.34753 2.33027 7.34762 2.33036 7.34771L2.68271 7.70106L2.68306 7.70141C2.80026 7.81871 2.93962 7.91152 3.09304 7.97444C3.24646 8.03735 3.41087 8.06912 3.57668 8.06788C3.7425 8.06664 3.90641 8.03242 4.05887 7.96721C4.21123 7.90205 4.34912 7.80724 4.4645 7.6883L2.31675 5.59301ZM21.3168 7.70106L21.6692 7.34771L4.46472 7.68807C6.37453 5.72109 9.04365 4.50001 11.9998 4.50001C14.956 4.50001 17.6252 5.72119 19.535 7.6883C19.6504 7.80724 19.7883 7.90205 19.9407 7.96721C20.0931 8.03242 20.257 8.06664 20.4228 8.06788C20.5887 8.06912 20.7531 8.03735 20.9065 7.97444C21.0599 7.91152 21.1993 7.81871 21.3165 7.70141L21.3168 7.70106ZM10.7616 14.0131L10.6158 14.1594V14.1897C10.4739 14.3965 10.3964 14.6427 10.3964 14.897C10.3964 15.2283 10.5279 15.546 10.762 15.7803L10.7627 15.7811L11.1164 16.1338C11.3508 16.3679 11.6685 16.4993 11.9998 16.4993C12.331 16.4993 12.6487 16.3679 12.8831 16.1338L12.8833 16.1336L13.2373 15.7796L13.2375 15.7793C13.4716 15.545 13.6031 15.2273 13.6031 14.896C13.6031 14.5648 13.4717 14.2472 13.2377 14.0129C13.0754 13.85 12.8825 13.7208 12.6701 13.6326C12.4576 13.5444 12.2298 13.4989 11.9998 13.4989C11.7697 13.4989 11.5419 13.5444 11.3294 13.6326C11.117 13.7208 10.924 13.8501 10.7616 14.0131Z"
                fill="black"
                stroke="black"
              />
              <path
                d="M20.6824 4.59258L20.6825 4.59271C20.9113 4.82834 21.0381 5.14454 21.0356 5.47295C21.0331 5.80105 20.9017 6.115 20.6698 6.34706L20.6824 4.59258ZM20.6824 4.59258C18.2312 2.0698 14.7977 0.500173 11.0004 0.500009M20.6824 4.59258L11.0004 0.500009M4.13934 7.42855L4.13931 7.42853C5.0253 6.50158 6.0902 5.76409 7.26952 5.26071C8.44868 4.75741 9.7177 4.49862 10.9998 4.50001C12.2818 4.49862 13.5509 4.75741 14.73 5.26071C15.9092 5.76405 16.9741 6.50147 17.86 7.42832C18.086 7.66426 18.2106 7.97931 18.2072 8.30599C18.2037 8.63279 18.0725 8.94524 17.8415 9.17642L17.8413 9.17656L17.4873 9.53056L17.4872 9.5307C17.3695 9.64834 17.2294 9.74128 17.0753 9.80408C16.9212 9.86687 16.7561 9.89826 16.5896 9.8964C16.4232 9.89454 16.2589 9.85946 16.1062 9.79323C15.9535 9.727 15.8156 9.63094 15.7005 9.5107L15.6997 9.50988C15.0937 8.87368 14.3646 8.36742 13.5567 8.0219C12.7488 7.67637 11.8791 7.49881 11.0004 7.50001L10.9998 7.50001C9.15183 7.50001 7.48486 8.2701 6.30035 9.51034L6.30034 9.51036C6.18525 9.63085 6.04723 9.72712 5.8944 9.79351C5.74156 9.85989 5.577 9.89505 5.41038 9.89691C5.24376 9.89877 5.07846 9.86731 4.92418 9.80436C4.7699 9.74141 4.62976 9.64825 4.51201 9.53036M4.13934 7.42855C3.91381 7.66415 3.78927 7.97861 3.79238 8.30481C3.7955 8.63201 3.92679 8.94494 4.15806 9.17641L4.15821 9.17656L4.51201 9.53036M4.13934 7.42855C4.14002 7.42784 4.14071 7.42712 4.14139 7.42641L4.4491 7.72236L4.86576 9.17701M4.13934 7.42855L4.49691 7.7781C4.36389 7.91903 4.29051 8.10608 4.29236 8.30005C4.29423 8.49637 4.373 8.68413 4.51177 8.82301L4.86576 9.17701M4.51201 9.53036L4.86576 9.17701M4.51201 9.53036L4.51221 9.53056L4.86576 9.17701M15.0475 10.2752L15.0476 10.2753C15.2663 10.5128 15.3846 10.8257 15.3778 11.1485C15.3709 11.4711 15.2396 11.7786 15.0113 12.0066L15.0475 10.2752ZM15.0475 10.2752C14.044 9.186 12.6017 8.50015 11.0002 8.50001M15.0475 10.2752L15.0109 12.007L14.6573 12.3606L14.6572 12.3607C14.5375 12.4802 14.3949 12.5742 14.2379 12.637C14.0809 12.6998 13.9128 12.7301 13.7437 12.7261C13.5747 12.722 13.4082 12.6837 13.2544 12.6135C13.1006 12.5432 12.9626 12.4425 12.8488 12.3174L12.8484 12.317C12.6146 12.0592 12.3294 11.8533 12.0111 11.7126C11.6928 11.5719 11.3485 11.4995 11.0005 11.5L10.9998 11.5C10.2661 11.5 9.60854 11.8135 9.14946 12.3177L9.14938 12.3177C9.03564 12.4426 8.89777 12.5431 8.7441 12.6132C8.59044 12.6833 8.42416 12.7215 8.25531 12.7256C8.08646 12.7296 7.91854 12.6994 7.76169 12.6368C7.60484 12.5741 7.46232 12.4803 7.34272 12.3611L7.34221 12.3606L6.98828 12.0066C6.98826 12.0066 6.98823 12.0066 6.98821 12.0066C6.75992 11.7783 6.62877 11.4706 6.62225 11.1478C6.61573 10.8252 6.73422 10.5126 6.95291 10.2754C7.46759 9.71517 8.0931 9.26807 8.78975 8.96245C9.48657 8.65675 10.2393 8.49927 11.0002 8.50001M11.0002 8.50001L10.9998 9.00001M11.0002 8.50001C11.0001 8.50001 10.9999 8.50001 10.9998 8.50001V9.00001M10.9998 9.00001C10.3082 8.99934 9.62396 9.14247 8.99062 9.42032C8.35728 9.69817 7.78863 10.1047 7.32077 10.614L10.9998 9.00001ZM11.0004 0.500009C9.19424 0.497871 7.40616 0.859135 5.74255 1.5623C4.079 2.26544 2.57392 3.29607 1.31689 4.59286L11.0004 0.500009ZM1.31675 4.59301C1.08815 4.82861 0.961409 5.14468 0.963903 5.47295C0.966397 5.80122 1.09793 6.11533 1.33008 6.34743C1.33018 6.34753 1.33027 6.34762 1.33036 6.34771L1.68271 6.70106L1.68306 6.70141C1.80026 6.81871 1.93962 6.91152 2.09304 6.97444C2.24646 7.03735 2.41087 7.06912 2.57668 7.06788C2.7425 7.06664 2.90641 7.03242 3.05887 6.96721C3.21123 6.90205 3.34912 6.80724 3.4645 6.6883L1.31675 4.59301ZM20.3168 6.70106L20.6692 6.34771L3.46472 6.68807C5.37453 4.72109 8.04365 3.50001 10.9998 3.50001C13.956 3.50001 16.6252 4.72119 18.535 6.6883C18.6504 6.80724 18.7883 6.90205 18.9407 6.96721C19.0931 7.03242 19.257 7.06664 19.4228 7.06788C19.5887 7.06912 19.7531 7.03735 19.9065 6.97444C20.0599 6.91152 20.1993 6.81871 20.3165 6.70141L20.3168 6.70106ZM9.7616 13.0131L9.61576 13.1594V13.1897C9.47389 13.3965 9.39642 13.6427 9.39642 13.897C9.39642 14.2283 9.52791 14.546 9.76199 14.7803L9.76271 14.7811L10.1164 15.1338C10.3508 15.3679 10.6685 15.4993 10.9998 15.4993C11.331 15.4993 11.6487 15.3679 11.8831 15.1338L11.8833 15.1336L12.2373 14.7796L12.2375 14.7793C12.4716 14.545 12.6031 14.2273 12.6031 13.896C12.6031 13.5648 12.4717 13.2472 12.2377 13.0129C12.0754 12.85 11.8825 12.7208 11.6701 12.6326C11.4576 12.5444 11.2298 12.4989 10.9998 12.4989C10.7697 12.4989 10.5419 12.5444 10.3294 12.6326C10.117 12.7208 9.92399 12.8501 9.7616 13.0131Z"
                fill="white"
                stroke="black"
              />
            </svg>

            <div className={styles.title}>Online Multiplayer</div>

            <div className={styles.smallText}>Play online against friends</div>

            <input
              type="radio"
              name="game-type"
              value="online_multiplayer"
              checked={gameType === GameType.ONLINE_MULTIPLAYER}
              onChange={(e) => setGameType(GameType.ONLINE_MULTIPLAYER)}
            />
          </label>
        </fieldset>
        {gameType === GameType.LOCAL_MULTIPLAYER && (
          <>
            <label htmlFor="player_name">Enter Second Player Name</label>
            <input
              placeholder="Enter Name"
              type="text"
              name="player_name"
              id="player_name"
              className={styles.input}
              value={secondPlayer}
              onChange={(e) => setSecondPlayer(e.target.value)}
              autoComplete={"off"}
            />
          </>
        )}
        {displayButton() && (
          <Button
            action={() => createGame()}
            text={"Create Game"}
            type={"primary"}
          ></Button>
        )}
      </Dialog>
    </div>
  );
};
export default HomeScreen;
